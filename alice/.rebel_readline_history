1553064047483:(reset)
1553064166108:(require '[io.wakamau.alice :as alice])
1553064212612:(alice/-main)
1553069456700:(require '[io.wakamau.alice :as alice])
1553069460943:(alice/-main)
1553069585209:(require '[io.wakamau.alice :as alice])
1553069601698:(alice/-main)
1553070016710:(require '[io.wakamau.alice :as alice])
1553070064755:(alice/-main)
1553070228614:(require '[io.wakamau.alice :as alice])
1553070234686:(alice/-main)
1553228075926:(require '[io.wakamau.alice :as alice])
1553228092097:(alice/-main)
1553228224484:(require '[io.wakamau.alice :as alice])
1553228229659:(alice/-main)
1553228340978:(require '[io.wakamau.alice :as alice])
1553228347364:(alice/-main)
1553228865873:(import java.net.InetAddress)
1553228887344:(InetAddress/getLocalHost)
1553228917112:(.getHostAddress (InetAddress/getLocalHost))
1553228952279:(.getCanonicalHostName (InetAddress/getLocalHost))
1553229302464:(require '[io.wakamau.alice :as alice])
1553229368235:(alice/-main)
1553229999829:(require '[io.wakamau.alice :as alice])
1553230003419:(alice/-main)
1553230017807:kevin
1553230042187:(require '[io.wakamau.alice :as alice])
1553230048104:(alice/-main)
1553230072735:(reset)
1553230093554:(alice/-main)
1553230099194:(require '[io.wakamau.alice :as alice])
1553230103246:(alice/-main)
1553230308931:(require '[io.wakamau.alice :as alice])
1553230313573:(alice/-main)
1553236651424:(require '[io.wakamau.alice :as alice])
1553236658610:(reset)
1553236663713:(require '[io.wakamau.alice :as alice])
1553236756356:(reset)
1553236758958:(require '[io.wakamau.alice :as alice])
1553236765431:(alice/-main)
1553237138885:(require '[io.wakamau.alice :as alice])
1553237156655:(reset)
1553237159799:(require '[io.wakamau.alice :as alice])
1553237181703:(alice/-main)
1553237724584:(require '[io.wakamau.alice :as alice])
1553237746217:(alice/-main)
1553238112165:(import java.lang.System)
1553238155535:(System/getproperty "line.separator")
1553238169992:(System/getProperty "line.separator")
1553238304736:(require '[io.wakamau.alice :as alice])
1553238322030:(alice/new-line)
1553238327921:alice/new-line
1553238341767:(alice/-main)
1553238552006:(require '[io.wakamau.alice :as alice])
1553238591943:(reset)
1553238595033:(require '[io.wakamau.alice :as alice])
1553238597652:(alice/-main)
1553238880483:(reset)
1553239200578:(require '[io.wakamau.alice :as alice])
1553239211310:alice/p
1553239214798:alice/q
1553239219822:alice/n
1553239223941:alice/phi
1553239228178:alice/e
1553239255907:(import java.math.BigInteger)
1553239275971:(.gcd phi e)
1553239283974:(.gcd alice/phi alice/e)
1553239575965:(require '[io.wakamau.alice :as alice])
1553239601310:(require '[cheshire.core :as chesh])
1553239618845:(chesh/generate-string {:e 34343343\n                        :n 34312553})
1553239652864:(chesh/generate-string {:e 34343343\n                        :n 34312553} {:pretty true})
1553239657436:(chesh/generate-string {:e 34343343\n                        :n 34312553})
1553239684829:(def sss (chesh/generate-string {:e 34343343\n                                 :n 34312553}))
1553239685870:sss
1553239707929:(chesh/parse-string sss true)
1553239812881:(reset)
1553239818155:(require '[io.wakamau.alice :as alice])
1553239923169:alice/p
1553239925301:(reset)
1553239927021:(require '[io.wakamau.alice :as alice])
1553239929630:alice/p
1553239957322:(reset)
1553239959804:(require '[io.wakamau.alice :as alice])
1553239961348:alice/p
1553239972535:alice/e
1553240013050:(alice/-main)
1553240268400:(require '[io.wakamau.alice :as alice])
1553240276107:alice/e
1553240278774:alice/d
1553240285580:alice/phi
1553240323369:(import java.math.BigInteger)
1553240347576:(.modInverse alice/e alice/phi)
1553240392693:(reset)
1553240399068:(require '[io.wakamau.alice :as alice])
1553240404052:alice/d
1553240589623:(import java.lang.String)
1553240597899:(.getBytes "abc")
1553240657388:(map #(int %) (.getBytes "abc"))
1553240677352:(def ss (map #(int %) (.getBytes "abc")))
1553240678253:ss
1553240691403:(import java.math.BigInteger)
1553240718459:(map #(BigInteger. %) ss)
1553240746032:(defn to-big[n]\n  (BigInteger. n))
1553240756137:(to-big "343")
1553240804951:(str (int \\a))
1553240842109:(map (comp str int) (.getBytes "abc"))
1553240896293:(map (to-big comp str int) (.getBytes "abc"))
1553240934406:(map (comp to-big str int) (.getBytes "abc"))
1553240943302:(first (map (comp to-big str int) (.getBytes "abc")))
1553240948109:(type (first (map (comp to-big str int) (.getBytes "abc"))))
1553240970688:(first (map (comp (BigInteger. %) str int) (.getBytes "abc")))
1553240975089:(first (map (comp #(BigInteger. %) str int) (.getBytes "abc")))
1553241046988:(map (comp to-big str int) (.getBytes "abc"))
1553241051486:(map (comp to-big str int) (.getBytes "abc is good"))
1553241058544:(def ss (map (comp to-big str int) (.getBytes "abc is good")))
1553241059102:ss
1553241141506:(.modPow 97 alice/e alice/n)
1553241153897:(.modPow (first ss) alice/e alice/n)
1553241181662:(def f (.modPow (first ss) alice/e alice/n))
1553241182231:f
1553241187304:alice/d
1553241214069:(.modPow f alice/d alice/n)
1553241277949:(map #(.modPow % alice/e alice/n) ss)
1553241283523:(def sd (map #(.modPow % alice/e alice/n) ss))
1553241284312:sd
1553241306721:(map #(.modPow % alice/d alice/n) sd)
1553241324076:(map (comp char #(.modPow % alice/d alice/n)) sd)
1553241377873:(apply str (map (comp char #(.modPow % alice/d alice/n)) sd))
1553241474898:(defn encrypt-message\n  [{:keys [e n]} message]\n  (let [big-message (map (comp #(BigInteger. %) str int) message)]\n    (map #(.modPow % e n) big-message)))
1553241507743:(encrypt-message {:e alice/e :n alice/n} "kevin")
1553241693041:(defn decrypt-message\n  [{:keys [d n]} cipher-text]\n  (let [msg-chars (map (comp char #(.modPow % d n)) cipher-text)]\n    (apply str msg-chars)))
1553241718391:(def kevin (encrypt-message {:e alice/e :n alice/n} "kevin"))
1553241719555:kevin
1553241744765:(decrypt-message {:d alice/d :n alice/n} kevin)
1553242064209:kevin
1553242068654:(str kevin)
1553242106594:(require '[cheshire.core :as chesh])
1553242133949:(chesh/generate-string kevin)
1553242153782:(chesh/parse-string (chesh/generate-string kevin))
1553242813623:(reset)
1553242820082:(require '[io.wakamau.alice :as alice])
1553242822729:(alice/-main)
1553243034110:(reset)
1553243050147:(require '[io.wakamau.alice :as alice])
1553243070870:(alice/-main)
1553243175836:(defn decrypt-message\n  [{:keys [d n]} cipher-text]\n  (let [byte-text (map (comp #(BigInteger. %) str int) (.getBytes cipher-text))\n        msg-chars (map (comp char #(.modPow % d n)) byte-text)]\n    (apply str msg-chars)))
1553243414777:(defn encrypt-message\n  [{:keys [e n]} message]\n  (let [big-message (map (comp #(BigInteger. %) str int) message)]\n    (map #(.modPow % e n) big-message)))
1553243439121:(encrypt-message {:e alice/e :n alice/n} "kevin")
1553243446372:(def kevin (encrypt-message {:e alice/e :n alice/n} "kevin"))
1553243447638:kevin
1553243457641:(defn decrypt-message\n  [{:keys [d n]} cipher-text]\n  (let [msg-chars (map (comp char #(.modPow % d n)) cipher-text)]\n    (apply str msg-chars)))
1553243475806:(decrypt-message {:d alice/d :n alice/n} kevin)
1553243503363:(require '[cheshire.core :as chesh])
1553243523565:(chesh/generate-string kevin)
1553243538364:(chesh/parse-string (chesh/generate-string kevin))
1553243574358:(require '[io.wakamau.alice :as alice])
1553243592870:(alice/-main)
1553243798427:(require '[io.wakamau.alice :as alice])
1553243824809:(alice/-main)
1553244837344:(require '[io.wakamau.alice :as alice])
1553245154992:(alice/-main)
1553245212008:(reset)
1553245215425:(alice/-main)
1553245219256:(require '[io.wakamau.alice :as alice])
1553245220879:(alice/-main)
1553245239730:(reset)
1553245242345:(require '[io.wakamau.alice :as alice])
1553245247057:(alice/-main)
1553245514123:(require '[io.wakamau.alice :as alice])
1553245528588:(alice/-main)
1553245986822:(import org.apache.commons.validator.routines.InetAddressValidator)
1553246021879:(def validator (InetAddressValidator/getInstance))
1553246023860:validator
1553246049421:(.isValid "0.0.0.0")
1553246095075:(.isValid validator "0.0.0.0")
1553246527117:"(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.){3}([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])"
1553246533257:(re-pattern "(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.){3}([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])")
1553246540694:(def ipv4 (re-pattern "(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.){3}([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])"))
1553246542647:ipvr
1553246544745:ipv4
1553246606720:"^(6553[0-5]|655[0-2]\\\\d|65[0-4]\\\\d\\\\d|6[0-4]\\\\d{3}|[1-5]\\\\d{4}|[2-9]\\\\d{3}|1[1-9]\\\\d{2}|10[3-9]\\\\d|102[4-9])$";
1553246622623:(def port (re-pattern ("^(6553[0-5]|655[0-2]\\\\d|65[0-4]\\\\d\\\\d|6[0-4]\\\\d{3}|[1-5]\\\\d{4}|[2-9]\\\\d{3}|1[1-9]\\\\d{2}|10[3-9]\\\\d|102[4-9])$")))
1553246638641:(def port (re-pattern "^(6553[0-5]|655[0-2]\\\\d|65[0-4]\\\\d\\\\d|6[0-4]\\\\d{3}|[1-5]\\\\d{4}|[2-9]\\\\d{3}|1[1-9]\\\\d{2}|10[3-9]\\\\d|102[4-9])$"))
1553246639536:port
1553246739097:(re-find (re-matcher port "3423"))
1553246748985:(re-matcher port "3423")
1553246756362:(re-find (re-matcher port "3423"))
1553246992459:(re-find (re-matcher port "38493"))
1553247008916:(re-find (re-matcher port "0"))
1553247021729:(re-find (re-matcher port "003"))
1553247026198:(re-find (re-matcher port "0033"))
1553247030956:(re-find (re-matcher port "10033"))
1553247034862:(re-find (re-matcher port "310033"))
1553247589316:(defn get-host-and-port\n  []\n  (println "Please enter the host:  ")\n  (loop [host (read-line)]\n    (if (.valid validator host)\n      (do (println "Please enter the port:  ")\n          (loop [port (read-line)]\n            (if (is-valid-port? port)\n              {:host host\n               :port port})\n            (recur (do (println "That port is kinda wrong, just try again")\n                       (read-line)))))\n      (recur (do (println "That host is kinda wrong, just try again")\n                 (read-line))))))
1553247599949:(reset)
1553247621501:(require '[io.wakamau.alice :as alice])
1553247632490:(alice/get-host-and-port)
1553247711652:(reset)
1553247715598:(require '[io.wakamau.alice :as alice])
1553247719651:(alice/get-host-and-port)
1553247803507:(reset)
1553247806283:(require '[io.wakamau.alice :as alice])
1553247810474:(alice/get-host-and-port)
1553247835079:(alice/is-valid-port? 8888)
1553247853578:(reset)
1553247856938:(require '[io.wakamau.alice :as alice])
1553247864103:(alice/is-valid-port? 8888)
1553247871459:(alice/get-host-and-port)
1553252858794:(doc or)
1553252960191:(require '[io.wakamau.alice :as alice])
1553252964430:(reset)
1553252969179:(require '[io.wakamau.alice :as alice])
1553252974240:(alice/get-host-and-port)
1553253057947:(require '[io.wakamau.alice :as alice])
1553253068750:(alice/get-host-and-port)
1553253094930:(reset)
1553253103227:(require '[io.wakamau.alice :as alice])
1553253106690:(alice/get-host-and-port)
1553253160853:(alice/-main)
