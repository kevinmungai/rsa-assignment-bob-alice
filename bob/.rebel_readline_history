1552989383019:(require '[clojure.core.async :as a])
1552989420699:(def inn (a/chan))
1552989483097:(go \n  (loop []\n    (let [txt (read-line)]\n      (a/put! inn txt)\n      (a/take! inn (fn [x] (println "value is:  " x))))))
1552989493663:(a/go \n  (loop []\n    (let [txt (read-line)]\n      (a/put! inn txt)\n      (a/take! inn (fn [x] (println "value is:  " x))))))
1552989495913:ei
1552989520115:(def inn (a/chan))
1552989541069:(require '[clojure.core.async :as a])
1552990503944:(reset)
1552990508695:(require '[clojure.core.async :as a])
1552990518686:(def inn (a/chan))
1552990876359:(loop [txt (read-line)]\n  (a/go (a/>! inn txt))\n  (a/go (println "the value is:  " (a/<! inn))))
1552990881049:kevin
1552990894905:(loop [txt (read-line)]\n  (a/go (a/>! inn txt))\n  (a/go (println "the value is:  " (a/<! inn)))\n  (recur (read-line)))
1552990972135:(require '[clojure.core.async :as a])
1552991241849:(def inn (a/chan))
1552991290639:(loop [txt (read-line)]\n  (println "value is:  " txt)\n  (recur (read-line)))
1552991318093:(require '[clojure.core.async :as a])
1552991327851:(def inn (a/chan))
1552991473466:(for [i (range 10)\n      :let [txt (read-line)]]\n  (a/put! inn txt))
1552991526727:(a/take! inn (fn [x] (println "the value is:  " x)))
1552991560219:(def inner (a/chan))
1552991701887:(loop [txt (read-line) i 0]\n  (if (= i 10)\n    "We are done"\n    (do (a/put! inner txt)\n        (recur (read-line) (inc i)))))
1552991754340:(a/take! inner (fn [x] (println "the value is:  " x)))
1553018587753:(defn prr []\n  (let [innn (a/chan)]\n    (go-loop [txt (read-line)]\n      (a/put! innn txt)\n      (recur (read-line)))\n    innn))
1553018596697:(defn prr []\n  (let [innn (a/chan)]\n    (a/go-loop [txt (read-line)]\n      (a/put! innn txt)\n      (recur (read-line)))\n    innn))
1553018603835:(prr)
1553018609338:ei
1553018640811:(require '[clojure.core.async :as a])
1553018712262:(def inn (a/chan))
1553018746733:(loop [txt (a/chan)]\n  (a/put! inn txt)\n  (recur (read-line)))
1553018800343:(loop []\n  (println "value is:  " (a/go (a/<! inn))))
1553018854835:(loop []\n  (a/take! inn (fn [x] (println "value is:  " x))))
1553018865260:(loop []\n  (a/take! inn (fn [x] (println "value is:  " x)))\n  (recur))
1553018919266:(loop [txt (a/chan)]\n  (a/put! inn txt)\n  (recur (read-line)))
1553019264563:(defn read-from-console\n  [in]\n  (loop [txt (read-line)]\n    (put! in txt)\n    (recur (read-line))))
1553019271904:(defn read-from-console\n  [in]\n  (loop [txt (read-line)]\n    (a/put! in txt)\n    (recur (read-line))))
1553019281243:(def another (a/chan))
1553019298222:(read-from-console another)
1553019445523:(loop []\n  (a/go (println "the value is:  " (a/<! another)))\n  (recur))
1553019536979:(require '[clojure.core.async :as a])
1553019699695:(defn read-from-console\n  [in]\n  (loop [txt (read-line)]\n    (a/put! in txt)\n    (recur (read-line))))
1553019702294:(def another (a/chan))
1553019708590:(read-from-console another)
1553019768257:(a/take! another #(println "the value is:  " %))
1553019893793:(defn print-to-console\n  [out]\n  (loop []\n    (take! out #(println "the value is:  " %))\n    (recur)))
1553019899694:(defn print-to-console\n  [out]\n  (loop []\n    (a/take! out #(println "the value is:  " %))\n    (recur)))
1553019907110:(print-to-console another)
1553019940409:(read-from-console another)
1553019983802:(a/put! another "food")
1553019997736:(a/put! another "is")
1553020000697:(a/put! another "good")
1553020090850:(defn read-from-console\n  [in]\n  (a/go-loop [txt (read-line)]\n    (a/>! in txt)\n    (recur (read-line))))
1553020106267:(def plastic (a/chan))
1553020139330:(read-from-console plastic)
1553020142080:e
1553020156796:(require '[clojure.core.async :as a])
1553020188364:(defn read-from-console\n  [in]\n  (loop [txt (read-line)]\n    (a/go (a/>! in txt))\n    (recur (read-line))))
1553020205212:(def another (a/chan))
1553020211799:(read-from-console another)
1553062610020:(reset)
1553062673137:(require '[io.wakamau.bob :as bob])
1553062681219:(bob/-main)
1553063004783:(require '[io.wakamau.bob :as bob])
1553063014468:(bob/-main)
1553063065771:(require '[io.wakamau.bob :as bob])
1553063073583:(bob/-main)
1553063517159:(def pk (atom 0))
1553063518492:pk
1553063521299:@pk
1553063541962:(reset! pk 34343)
1553063544782:@pk
1553063635282:(require '[io.wakamau.bob :as bob])
1553063645414:(reset)
1553063648135:(require '[io.wakamau.bob :as bob])
1553063651611:(bob/-main)
1553064153881:(require '[io.wakamau.bob :as bob])
1553064202243:(bob/-main)
1553069203192:(require '[io.wakamau.bob :as bob])
1553069219210:(bob/-main)
1553069531142:(require '[io.wakamau.bob :as bob])
1553069541373:(bob/-main)
1553069975360:(require '[io.wakamau.bob :as bob])
1553069993615:(bob/-main)
1553070169019:(require '[io.wakamau.bob :as bob])
1553070196444:(bob/-main)
1553081149264:(import java.net.ServerSocket)
1553082948997:(defn serve\n  [port handler]\n  (with-open [server-socket (ServerSocket. port)\n              socket (.accept server-socket)]\n    (let [reader (io/reader socket)\n          writer (io/writer socket)\n          msg-in (.readLine reader)\n          msg-out (handler msg-in)]\n      (.write writer msg-out)\n      (.flush writer))))
1553082963395:(require '[clojure.java.io :as io])
1553082965054:(defn serve\n  [port handler]\n  (with-open [server-socket (ServerSocket. port)\n              socket (.accept server-socket)]\n    (let [reader (io/reader socket)\n          writer (io/writer socket)\n          msg-in (.readLine reader)\n          msg-out (handler msg-in)]\n      (.write writer msg-out)\n      (.flush writer))))
1553083087560:(defn serve\n  [port handler]\n  (with-open [server-socket (ServerSocket. port)\n              address (.getHostAddress (.getInetAddress server-socket))\n              port (.getLocalPort server-socket)\n              socket (.accept server-socket)]\n    (println (format "Server is listening on %s:%d .." address port))\n    (let [reader (io/reader socket)\n          writer (io/writer socket)\n          msg-in (.readLine reader)\n          msg-out (handler msg-in)]\n      (.write writer msg-out)\n      (.flush writer))))
1553083116872:(serve 8888 #(.toUpperCase %))
1553083210949:(defn serve\n  [port handler]\n  (let [server-socket (ServerSocket. port)\n              address (.getHostAddress (.getInetAddress server-socket))\n              port (.getLocalPort server-socket)\n              socket (.accept server-socket)]\n    (println (format "Server is listening on %s:%d .." address port))\n    (let [reader (io/reader socket)\n          writer (io/writer socket)\n          msg-in (.readLine reader)\n          msg-out (handler msg-in)]\n      (.write writer msg-out)\n      (.flush writer))))
1553083216625:(serve 8888 #(.toUpperCase %))
1553083614214:(require '[io.wakamau.bob :as bob])
1553083636664:(bob/serve 8888 #(.toUpperCase %))
1553083751949:(reset)
1553083764462:(require '[io.wakamau.bob :as bob])
1553083768550:(bob/serve 8888 #(.toUpperCase %))
1553083957022:(reset)
1553083960653:(require '[io.wakamau.bob :as bob])
1553083963951:(bob/serve 8888 #(.toUpperCase %))
1553084568624:(loop []\n  (let [con (new java.net.ServerSocket 6011)\n        servicesocket (.accept con)\n        input (new java.io.DataInputStream (.getInputStream servicesocket))\n        output (new java.io.DataOutputStream (.getOutputStream servicesocket))\n        message-in (.readLine input)\n        capitals (str (.toUpperCase message-in) "\\n")]\n    (.writeBytes output capitals)\n    (.close output)\n    (.close input)\n    (.close servicesocket)\n    (.close con)\n    (recur)))
1553164457226:(def answer-to-life\n  (future\n    (println "[Future] started computation")\n    (Thead/sleep 3000)\n    (println "[Future] stopped computation")\n    42))
1553164469344:(def answer-to-life\n  (future\n    (println "[Future] started computation")\n    (Thread/sleep 3000)\n    (println "[Future] stopped computation")\n    42))
1553164498643:@answer-to-life
1553164506080:(def answer-to-life\n  (future\n    (println "[Future] started computation")\n    (Thread/sleep 10000)\n    (println "[Future] stopped computation")\n    42))
1553164510466:@answer-to-life
1553226693783:(require '[io.wakamau.bob :as bob])
1553226716933:(bob/-main)
1553226943991:(require '[io.wakamau.bob :as bob])
1553226952183:(bob/-main)
1553227068637:(require '[io.wakamau.bob :as bob])
1553227079632:(bob/-main)
1553227300023:(require '[io.wakamau.bob :as bob])
1553227308833:(bob/-main)
1553227379427:(require '[io.wakamau.bob :as bob])
1553227387672:(bob/-main)
1553228065497:(require '[io.wakamau.bob :as bob])
1553228079737:(bob/-main)
1553228211588:(require '[io.wakamau.bob :as bob])
1553228219686:(bob/-main)
1553228324409:(require '[io.wakamau.bob :as bob])
1553228335538:(bob/-main)
1553229036438:(require '[io.wakamau.bob :as bob])
1553229045518:(bob/-main)
1553229337862:(require '[io.wakamau.bob :as bob])
1553229352482:(bob/-main)
1553230057540:(require '[io.wakamau.bob :as bob])
1553230084443:(bob/-main)
1553230186680:(require '[io.wakamau.bob :as bob])
1553230193870:(bob/-main)
1553230292773:(require '[io.wakamau.bob :as bob])
1553230302880:(bob/-main)
1553236667148:(require '[io.wakamau.bob :as bob])
1553236675402:(bob/-main)
1553237132684:(require '[io.wakamau.bob :as bob])
1553237164767:(bob/-main)
1553237720422:(require '[io.wakamau.bob :as bob])
1553237749276:(bob/-main)
1553238334868:(require '[io.wakamau.bob :as bob])
1553238345471:(bob/-main)
1553238555679:(require '[io.wakamau.bob :as bob])
1553238565104:(bob/-main)
1553239995564:(require '[io.wakamau.bob :as bob])
1553240007667:(bob/-main)
1553242739745:(require '[io.wakamau.bob :as bob])
1553242772919:(bob/-main)
1553243053049:(require '[io.wakamau.bob :as bob])
1553243065198:(bob/-main)
1553243578434:(require '[io.wakamau.bob :as bob])
1553243590507:(bob/-main)
1553243801700:(require '[io.wakamau.bob :as bob])
1553243820271:(bob/-main)
1553244833932:(require '[io.wakamau.bob :as bob])
1553244867258:(reset)
1553244870141:(require '[io.wakamau.bob :as bob])
1553244884859:(bob/-main)
1553244953937:(Integer/parseInt "3424")
1553244968817:(reset)
1553244971081:(bob/-main)
1553244976872:(require '[io.wakamau.bob :as bob])
1553244978971:(bob/-main)
1553245033440:(reset)
1553245038668:(require '[io.wakamau.bob :as bob])
1553245040717:(bob/-main)
1553245073534:(reset)
1553245075433:(require '[io.wakamau.bob :as bob])
1553245076775:(bob/-main)
1553245404909:(print "334")
1553245431163:(print "343") (print "4343")
1553245456818:(reset)
1553245504910:(require '[io.wakamau.bob :as bob])
1553245509001:(bob/-main)
1553254468669:(require '[io.wakamau.bob :as bob])
1553254489285:(bob/get-port)
1553254523400:(reset)
1553254527161:(require '[io.wakamau.bob :as bob])
1553254529732:(bob/get-port)
1553254549770:(reset)
1553254558071:(require '[io.wakamau.bob :as bob])
1553254560967:(bob/get-port)
